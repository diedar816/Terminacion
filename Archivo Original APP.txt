const express = require('express');
const bodyParser = require('body-parser');
const session = require('express-session');
const mysql = require('mysql');
const bcrypt = require('bcrypt');
/*Donde se contienen las configuraciones del proyecto, por donde va a escuchar*/
const app = express();
const PORT = process.env.PORT || 3000;

/*Se tiene su propio servidor, cada sesion tiene un token*/

app.use(session({
    secret: 'mysecretKey',
    resave: false,
    saveUninitialized: true

}));
/*Se configura el body Parser*, para analizar solicitud de guardar información de tipo POST*/
app.use(bodyParser.urlencoded({extended:true}));


/*Entrada a la base de datos  Configuracion de la conexion a la base de datos*/
const db = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'tienda'
});

db.connect((err) => {
  if (err) throw err;
  console.log('Conexión a la base de datos MySql establecida');
});

//Resolver las rutas de los archivos estaticos
app.use(express.static("public"));

//Ruta para el index

app.get('/', (req, res) => {
    res.sendFile(__dirname + '/public/index.html');
});


//Defirnir ruta para el formulario de logueo de sesión
app.get('/login', (req, res) => {
    res.sendFile(__dirname + '/public/login.html');
});

//Defirnir ruta para el formulario de registro de sesión
app.get('/registro', (req, res) => {
    res.sendFile(__dirname + '/public/registro.html');
});

/*Inicializar el servidor*/
app.listen(PORT, () => {
    console.log('Servidor iniciado en el puerto$(PORT)');
 });

 //Rutas de db
//Puedes implementar rutas para el registro, inicio de sesión, cierre de sesión.//post porque lo ingreso un usuario desde un formulario
app.post('/registro', async (req, res) => {
    const { nombre, apellido, telefono, email, dirección, codigoCompraCliente, contraseña} = req.body;
    const hashedContraseña = await bcrypt.hash(contraseña, 10);
    //<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    db.query('INSERT INTO compradores (nombre, apellido, telefono, email, dirección, codigoCompraCliente, contraseña) VALUES (?, ?, ?, ?, ?, ?, ?)',[nombre, apellido, telefono, email, dirección, codigoCompraCliente, hashedContraseña],(err, result)=>{
        if(err) {
            console.log(err);
            res.send('Error al registrar usuario');
        } else {
            console.log(result);
            
            res.redirect('/');
            
            //res.send('Usuario registrado con éxito!');
        }
    });
});
 
//Ruta de inicio de sesión
app.post('/login', async (req, res) => {
    const { email, contraseña } = req.body;

    db.query('SELECT * FROM compradores WHERE email = ?', [email], async (err, result) => {
        if(err){
            console.log(err);
            res.send('Error al iniciar sesión');
        } else {
            if(result.length > 0) {
                const usuario = result[0];
                if(await bcrypt.compare(contraseña, usuario.contraseña)){
                    req.session.usuario = usuario;
                    res.send('Inicio de sesión exitoso');
                } else {
                    res.send('Credenciales incorrectas');
                }
            } else {
                res.send('Usuario no encontrado');
            }
        }
    });
});